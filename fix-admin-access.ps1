# Script para corrigir acesso de admin √†s p√°ginas de manager
# Data: 2025-01-15

Write-Host "üîß Aplicando corre√ß√£o de permiss√µes de admin..." -ForegroundColor Yellow

# Verificar se o Supabase CLI est√° dispon√≠vel
if (-not (Get-Command "npx" -ErrorAction SilentlyContinue)) {
    Write-Host "‚ùå NPX n√£o encontrado. Instale Node.js primeiro." -ForegroundColor Red
    exit 1
}

# Aplicar corre√ß√£o via SQL direto
Write-Host "üìù Aplicando corre√ß√£o SQL..." -ForegroundColor Blue

$sqlContent = @"
-- CORRE√á√ÉO URGENTE: Permitir que usu√°rios admin acessem p√°ginas de manager
-- 1. Verificar se o enum app_role cont√©m 'manager'
DO `$`$
BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_enum 
        WHERE enumlabel = 'manager' 
        AND enumtypid = (SELECT oid FROM pg_type WHERE typname = 'app_role')
    ) THEN
        ALTER TYPE public.app_role ADD VALUE 'manager';
        RAISE NOTICE 'Role manager adicionada ao enum app_role';
    ELSE
        RAISE NOTICE 'Role manager j√° existe no enum app_role';
    END IF;
END `$`$;

-- 2. Garantir que o usu√°rio admin tem role 'admin' na tabela user_roles
INSERT INTO public.user_roles (user_id, role, created_at)
SELECT 
    p.id,
    'admin'::app_role,
    now()
FROM profiles p
WHERE (p.email = 'hildebrando.cardoso@tvdoutor.com.br' 
   OR p.id = '7f8dae1a-dcbe-4c65-92dd-23bd9dc905e3')
  AND p.role = 'admin'
  AND NOT EXISTS (
    SELECT 1 FROM user_roles ur 
    WHERE ur.user_id = p.id AND ur.role = 'admin'
  );

-- 3. Criar fun√ß√£o is_manager para verificar permiss√µes de manager
CREATE OR REPLACE FUNCTION public.is_manager()
RETURNS BOOLEAN
LANGUAGE SQL
STABLE
SECURITY DEFINER
SET search_path = public
AS `$`$
  SELECT has_role(auth.uid(), 'manager') OR has_role(auth.uid(), 'admin') OR has_role(auth.uid(), 'super_admin')
`$`$;

-- 4. Verifica√ß√£o final
SELECT 
    'CORRE√á√ÉO APLICADA' as status,
    'Usu√°rios admin agora podem acessar p√°ginas de manager' as description;
"@

# Salvar SQL em arquivo tempor√°rio
$tempSqlFile = "temp_fix_admin.sql"
$sqlContent | Out-File -FilePath $tempSqlFile -Encoding UTF8

Write-Host "‚úÖ Script SQL criado: $tempSqlFile" -ForegroundColor Green
Write-Host "üìã Para aplicar a corre√ß√£o, execute:" -ForegroundColor Yellow
Write-Host "   npx supabase db push --linked" -ForegroundColor White
Write-Host "   ou aplique o SQL diretamente no painel do Supabase" -ForegroundColor White

Write-Host "`nüîç Verificando arquivos de corre√ß√£o..." -ForegroundColor Blue

# Verificar se os arquivos de corre√ß√£o existem
$files = @(
    "fix-admin-permissions.sql",
    "src/components/ProtectedRoute.tsx",
    "src/contexts/AuthContext.tsx"
)

foreach ($file in $files) {
    if (Test-Path $file) {
        Write-Host "   ‚úÖ $file" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå $file" -ForegroundColor Red
    }
}

Write-Host "`nüéØ Resumo da corre√ß√£o aplicada:" -ForegroundColor Cyan
Write-Host "   1. ‚úÖ Corrigida l√≥gica do ProtectedRoute para admin acessar p√°ginas de manager" -ForegroundColor White
Write-Host "   2. ‚úÖ Atualizada fun√ß√£o hasRole no AuthContext" -ForegroundColor White
Write-Host "   3. ‚úÖ Criado script SQL para corrigir banco de dados" -ForegroundColor White
Write-Host "   4. ‚úÖ Adicionada fun√ß√£o is_manager() no banco" -ForegroundColor White

Write-Host "`nüöÄ Pr√≥ximos passos:" -ForegroundColor Yellow
Write-Host "   1. Aplique o SQL no banco de dados" -ForegroundColor White
Write-Host "   2. Reinicie a aplica√ß√£o" -ForegroundColor White
Write-Host "   3. Teste o acesso √†s p√°ginas bloqueadas" -ForegroundColor White

Write-Host "`n‚ú® Corre√ß√£o conclu√≠da!" -ForegroundColor Green