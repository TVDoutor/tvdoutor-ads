// Teste manual das funcionalidades CRUD de projetos
// Este arquivo pode ser executado no console do navegador para testar as valida√ß√µes

import { validateProjeto, sanitizeProjeto } from '../utils/validations/projeto-validations';
import { criarProjeto, atualizarProjeto, excluirProjeto } from '../lib/agencia-service';

// Dados de teste v√°lidos
const dadosValidos = {
  nome_projeto: 'Projeto Teste Valida√ß√£o',
  descricao: 'Descri√ß√£o do projeto de teste para valida√ß√µes',
  data_inicio: '2024-01-15',
  data_fim: '2024-06-30',
  deal_id: '123e4567-e89b-12d3-a456-426614174000', // UUID de exemplo
  status_projeto: 'planejamento' as const,
  orcamento_projeto: '50000.00',
  responsavel_projeto: '987fcdeb-51a2-43d1-b789-123456789abc', // UUID de exemplo
  observacoes: 'Observa√ß√µes do projeto de teste',
  prioridade: 'alta' as const,
  tipo_projeto: 'campanha' as const
};

// Dados de teste inv√°lidos
const dadosInvalidos = {
  nome_projeto: 'AB', // Muito curto
  descricao: 'A'.repeat(1001), // Muito longo
  data_inicio: 'data-inv√°lida',
  data_fim: '2023-01-01', // Data no passado
  deal_id: 'uuid-inv√°lido',
  status_projeto: 'status_inexistente' as any,
  orcamento_projeto: '-1000', // Valor negativo
  responsavel_projeto: 'uuid-inv√°lido',
  observacoes: 'A'.repeat(2001), // Muito longo
  prioridade: 'prioridade_inexistente' as any,
  tipo_projeto: 'tipo_inexistente' as any
};

// Fun√ß√£o para testar valida√ß√µes
export const testarValidacoes = () => {
  console.log('üß™ Iniciando testes de valida√ß√£o...');
  
  // Teste 1: Dados v√°lidos
  console.log('\nüìã Teste 1: Valida√ß√£o com dados v√°lidos');
  const resultadoValido = validateProjeto(dadosValidos);
  console.log('Resultado:', resultadoValido);
  
  if (resultadoValido.success) {
    console.log('‚úÖ Dados v√°lidos passaram na valida√ß√£o');
  } else {
    console.log('‚ùå Dados v√°lidos falharam na valida√ß√£o:', resultadoValido.errors);
  }
  
  // Teste 2: Dados inv√°lidos
  console.log('\nüìã Teste 2: Valida√ß√£o com dados inv√°lidos');
  const resultadoInvalido = validateProjeto(dadosInvalidos);
  console.log('Resultado:', resultadoInvalido);
  
  if (!resultadoInvalido.success) {
    console.log('‚úÖ Dados inv√°lidos foram rejeitados corretamente');
    console.log('Erros encontrados:', resultadoInvalido.errors);
  } else {
    console.log('‚ùå Dados inv√°lidos passaram na valida√ß√£o (erro!)');
  }
  
  // Teste 3: Sanitiza√ß√£o
  console.log('\nüìã Teste 3: Sanitiza√ß√£o de dados');
  const dadosComEspacos = {
    ...dadosValidos,
    nome_projeto: '  Projeto   com   espa√ßos   ',
    descricao: '\n\nDescri√ß√£o\ncom\nquebras\n\n',
    orcamento_projeto: '  50000.123456  '
  };
  
  const dadosSanitizados = sanitizeProjeto(dadosComEspacos);
  console.log('Dados originais:', dadosComEspacos);
  console.log('Dados sanitizados:', dadosSanitizados);
  
  // Teste 4: Valida√ß√£o de datas
  console.log('\nüìã Teste 4: Valida√ß√£o de datas');
  const dadosDataInvalida = {
    ...dadosValidos,
    data_inicio: '2024-06-30',
    data_fim: '2024-01-15' // Data fim antes do in√≠cio
  };
  
  const resultadoData = validateProjeto(dadosDataInvalida);
  console.log('Teste data fim antes do in√≠cio:', resultadoData);
  
  console.log('\nüéâ Testes de valida√ß√£o conclu√≠dos!');
};

// Fun√ß√£o para testar opera√ß√µes CRUD (requer conex√£o com Supabase)
export const testarCRUD = async () => {
  console.log('üîß Iniciando testes CRUD...');
  
  try {
    // Teste de cria√ß√£o
    console.log('\nüìã Teste: Criar projeto');
    const projetoCriado = await criarProjeto(dadosValidos);
    console.log('‚úÖ Projeto criado:', projetoCriado);
    
    // Teste de atualiza√ß√£o
    console.log('\nüìã Teste: Atualizar projeto');
    const dadosAtualizacao = {
      ...dadosValidos,
      nome_projeto: 'Projeto Atualizado',
      status_projeto: 'em_andamento' as const
    };
    
    const projetoAtualizado = await atualizarProjeto(projetoCriado.id, dadosAtualizacao);
    console.log('‚úÖ Projeto atualizado:', projetoAtualizado);
    
    // Teste de exclus√£o
    console.log('\nüìã Teste: Excluir projeto');
    const resultadoExclusao = await excluirProjeto(projetoCriado.id);
    console.log('‚úÖ Projeto exclu√≠do:', resultadoExclusao);
    
    console.log('\nüéâ Testes CRUD conclu√≠dos com sucesso!');
    
  } catch (error) {
    console.error('‚ùå Erro nos testes CRUD:', error);
  }
};

// Fun√ß√£o para testar casos extremos
export const testarCasosExtremos = () => {
  console.log('üîç Iniciando testes de casos extremos...');
  
  const casosExtremos = [
    {
      nome: 'String vazia',
      dados: { ...dadosValidos, nome_projeto: '' }
    },
    {
      nome: 'Apenas espa√ßos',
      dados: { ...dadosValidos, nome_projeto: '   ' }
    },
    {
      nome: 'Caracteres especiais',
      dados: { ...dadosValidos, nome_projeto: '<script>alert("xss")</script>' }
    },
    {
      nome: 'Or√ßamento muito grande',
      dados: { ...dadosValidos, orcamento_projeto: '999999999999999' }
    },
    {
      nome: 'UUID malformado',
      dados: { ...dadosValidos, deal_id: 'n√£o-√©-uuid' }
    },
    {
      nome: 'Data no futuro distante',
      dados: { ...dadosValidos, data_inicio: '2050-01-01' }
    }
  ];
  
  casosExtremos.forEach((caso, index) => {
    console.log(`\nüìã Teste ${index + 1}: ${caso.nome}`);
    const resultado = validateProjeto(caso.dados);
    
    if (resultado.success) {
      console.log('‚ö†Ô∏è  Caso extremo passou na valida√ß√£o (pode ser problema)');
    } else {
      console.log('‚úÖ Caso extremo rejeitado corretamente');
      console.log('Erros:', resultado.errors);
    }
  });
  
  console.log('\nüéâ Testes de casos extremos conclu√≠dos!');
};

// Fun√ß√£o principal para executar todos os testes
export const executarTodosTestes = async () => {
  console.log('üöÄ Executando bateria completa de testes...');
  
  testarValidacoes();
  testarCasosExtremos();
  
  // Testes CRUD s√≥ se houver conex√£o com Supabase
  try {
    await testarCRUD();
  } catch (error) {
    console.log('‚ö†Ô∏è  Testes CRUD pulados (sem conex√£o com Supabase)');
  }
  
  console.log('\nüèÅ Todos os testes conclu√≠dos!');
};

// Exportar para uso no console do navegador
if (typeof window !== 'undefined') {
  (window as any).projetoTests = {
    testarValidacoes,
    testarCRUD,
    testarCasosExtremos,
    executarTodosTestes
  };
  
  console.log('üîß Testes de projeto dispon√≠veis no console:');
  console.log('- window.projetoTests.testarValidacoes()');
  console.log('- window.projetoTests.testarCRUD()');
  console.log('- window.projetoTests.testarCasosExtremos()');
  console.log('- window.projetoTests.executarTodosTestes()');
}