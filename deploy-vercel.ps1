# Script PowerShell para Deploy na Vercel
# Execute este script para fazer deploy das corre√ß√µes

Write-Host "üöÄ Iniciando Deploy para Vercel..." -ForegroundColor Cyan

# Verificar se est√° no diret√≥rio correto
if (!(Test-Path "package.json")) {
    Write-Host "‚ùå Execute este script no diret√≥rio raiz do projeto" -ForegroundColor Red
    exit 1
}

# Verificar se o Git est√° configurado
try {
    $gitStatus = git status --porcelain
    Write-Host "‚úÖ Reposit√≥rio Git encontrado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Git n√£o encontrado. Instale o Git primeiro." -ForegroundColor Red
    exit 1
}

# Verificar se h√° mudan√ßas para commit
if ($gitStatus) {
    Write-Host "üìù Mudan√ßas detectadas:" -ForegroundColor Yellow
    Write-Host $gitStatus -ForegroundColor Gray
    
    # Perguntar se quer fazer commit
    $commit = Read-Host "Deseja fazer commit das mudan√ßas? (y/n)"
    
    if ($commit -eq "y" -or $commit -eq "Y") {
        Write-Host "`nüì¶ Fazendo commit das altera√ß√µes..." -ForegroundColor Blue
        
        # Adicionar todos os arquivos
        git add .
        
        # Commit com mensagem
        $commitMessage = "fix: Corrigir acesso admin e erros 400 nas Edge Functions

- Corrigir chamadas Edge Functions sem body JSON
- Melhorar verifica√ß√£o de permiss√µes admin  
- Adicionar suporte a super_admin
- Corrigir case sensitivity em roles
- Adicionar componente de debug tempor√°rio"
        
        git commit -m $commitMessage
        
        Write-Host "‚úÖ Commit realizado com sucesso!" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Commit cancelado pelo usu√°rio" -ForegroundColor Yellow
    }
} else {
    Write-Host "‚ÑπÔ∏è Nenhuma mudan√ßa detectada" -ForegroundColor Blue
}

# Verificar se h√° commits para push
try {
    $aheadCommits = git rev-list --count HEAD ^origin/main
    if ($aheadCommits -gt 0) {
        Write-Host "`nüöÄ Fazendo push para o reposit√≥rio..." -ForegroundColor Blue
        git push origin main
        
        Write-Host "‚úÖ Push realizado com sucesso!" -ForegroundColor Green
        Write-Host "üîÑ Vercel iniciar√° deploy autom√°tico..." -ForegroundColor Cyan
    } else {
        Write-Host "‚ÑπÔ∏è Nenhum commit novo para enviar" -ForegroundColor Blue
    }
} catch {
    Write-Host "‚ùå Erro ao fazer push: $_" -ForegroundColor Red
    Write-Host "üí° Verifique se o reposit√≥rio remoto est√° configurado corretamente" -ForegroundColor Yellow
}

# Verificar build local (opcional)
$buildLocal = Read-Host "`nDeseja testar o build localmente? (y/n)"
if ($buildLocal -eq "y" -or $buildLocal -eq "Y") {
    Write-Host "`nüî® Testando build local..." -ForegroundColor Blue
    
    try {
        npm run build
        
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ Build local bem-sucedido!" -ForegroundColor Green
        } else {
            Write-Host "‚ùå Erro no build local" -ForegroundColor Red
        }
    } catch {
        Write-Host "‚ùå Erro ao executar build: $_" -ForegroundColor Red
    }
}

# Instru√ß√µes finais
Write-Host "`nüìã Pr√≥ximos passos:" -ForegroundColor Cyan
Write-Host "1. Acesse o Dashboard da Vercel para acompanhar o deploy" -ForegroundColor White
Write-Host "2. Execute o script SQL no Supabase Dashboard" -ForegroundColor White
Write-Host "3. Fa√ßa logout/login na aplica√ß√£o ap√≥s o deploy" -ForegroundColor White
Write-Host "4. Teste o acesso admin na p√°gina /users" -ForegroundColor White

Write-Host "`nüîó Links √∫teis:" -ForegroundColor Cyan
Write-Host "- Vercel Dashboard: https://vercel.com/dashboard" -ForegroundColor White
Write-Host "- Supabase Dashboard: https://supabase.com/dashboard" -ForegroundColor White
Write-Host "- Logs da Vercel: Dashboard ‚Üí Deployments ‚Üí [seu-projeto] ‚Üí View Function Logs" -ForegroundColor White

Write-Host "`n‚úÖ Script conclu√≠do!" -ForegroundColor Green
